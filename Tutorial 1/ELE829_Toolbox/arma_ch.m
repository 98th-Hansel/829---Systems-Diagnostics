function arma_ch( Process_Type, A1, A2 )
%ARMA_CH Demonstrate correlation characteristics of ARMA models
%
% Syntax:
%
%   arma_ch( Process_Type, Array1, Array2 )
%
% Description:
%
%   This function computes the sample autocorrelation function (ACF) and
%   sample partial autocorrelation function (PACF) of a colored noise
%   process generated by filtering a white noise sequence through a 
%   noise filter with a autoregressive (AR) or a moving average (MA) or
%   a autoregressive moving average (ARMA) chracteristics.   The user
%   can test different noise models by specifying the system zeros and/or 
%   system poles.  
%
%   The function displays (1) the system pole-zero diagram, (2) the
%   normalized ACF values r_xx(n) for 0 <= n <= 25 with r_xx(0) = 1,
%   and (3) the PACF values p_xx(n) for 0 <= n <= 25 together with 
%   95% confidence bounds.
%
% Input Format:
%
%  arma_ch( Process_Type, Array1 )
%
%     'AR' autoregressive process: If Process_Type = 'AR', the next 
%          argument must be an array specifying the system poles.  All
%          system zeros (same number as the system poles will be at 0.
%          Example:
%                  p1 = -0.35 + 0.60i;
%                  p2 = conj(p1);
%                  arma_ch( 'AR', [p1 p2] ) 
%
%          simulates a 2nd order AR system, AR(2), with poles at 
%          p1 and p2 = p1*.
%
%     'MA' moving average process: If Process_Type = 'MR', the next 
%          argument must be an array specifying the system zeros.  All
%          system poles (same number as the system zeros will be at 0.
%          Example:
%                  z = 0.60;
%                  arma_ch( 'MA', [z] ) 
%
%          simulates a 1st order MA system, MA(1), with a zero at z = 0.6.
%
%
%  arma_ch( Process_Type, Array1, Array2 )
%
%     'ARMA' autoregressive moving average process: If Process_Type='ARMA'
%          the next two arguments must be arrays specifying the system 
%          poles (first array) and system zeros (second array).  
%          Example:
%                  z = 0.60; p1 = -0.35 + 0.60i; p2 = conj(p1);
%                  arma_ch( 'ARMA', [p1 p2], [z] ) 
%
%          simulates an ARMA(2,1) system with a zero at z = 0.6 and two
%          poles at p1 and p2.
%
%  It is the user's responsibility to: (a) ensure that the resulting noise 
%  model is stable, i.e. that all system poles are within the unit circle, 
%  and (b) system zeros/poles occur in complex conjugate pairs

%    Author: Mehmet Zeytinoglu (mzeytin@ee.ryerson.ca)
%            Department of Electrical and Computer Engineering
%            Ryerson University
%            Toronto, Ontario, M5B 2K3 
%            CANADA
%
%    $Revision: 1.0 $    $Date: 2010/11/25 15:09:00 $
%

%=====================================================
% CHECK THE INPUT: Rudimentary error checking
%=====================================================
if (nargin == 1)
    error('arma_ch: insufficient number of input parameters.')
    help arma_ch
end
      
%=====================================================
% Default parameter values
%=====================================================

noLags =   25;    % #of lags for which ACF and PACF values are computed.
Gain   =    1;    % System gain. 
NN     = 5000;    % Length of white and colored noise sequences used.

switch Process_Type
    
    case { 'AR' }
       
        AR_Order = length( A1 );
        SystemPoles = A1(:);
        SystemZeros = zeros( size(SystemPoles) ); 
        ProcessName = [ Process_Type '(' num2str(AR_Order) ')' ];
                
     case { 'MA' }
       
        MA_Order = length( A1 );
        SystemZeros = A1(:);
        SystemPoles = zeros( size(SystemZeros) );
        ProcessName = [ Process_Type '(' num2str(MA_Order) ')' ];
        
    case { 'ARMA' }
        
        AR_Order = length( A1 );
        MA_Order = length( A2 );
        SystemZeros = A2(:);
        SystemPoles = A1(:);
        ProcessName = [ Process_Type '(' num2str(AR_Order) ',' ...
                                         num2str(MA_Order) ')' ];
        
end

%======================================================================
% Convert the system poles and zeros into a transfer function
% H(z) = NUM(z)/DEN(z) or using the"q" operator H(q) = NUM(q)/DEN(q)
% generate NN white noise samples and feed them through H(z) to
% generate the colored noise sequence.
%======================================================================

[ Num, Den  ] = zp2tf( SystemZeros, SystemPoles, Gain);
ColoredNoise  = dlsim( Num, Den, randn(NN,1) );

%=========================================================
% Now that we have calculated everything let us generate
% the Pole-Zero, the ACF and the PACF plots.
%=========================================================

subplot(131); 
    zplane( SystemZeros, SystemPoles );

subplot(132); 
    autocorr( ColoredNoise(:), noLags );
    title([ProcessName ': Sample ACF with 95% Confidence Limits'])

subplot(133); 
    parcorr( ColoredNoise(:), noLags );
    title([ProcessName ': Sample PACF with 95% Confidence Limits'])
    
set( gcf, 'Name', ProcessName, 'Selected', 'off' ); 
